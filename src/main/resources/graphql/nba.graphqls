type Player {
    id: ID!
    teamId: Int!
    name: String!
    age: Int
    height: String
    position: String
}

input PlayerInput {
    teamId: Int!
    name: String!
    age: Int
    height: String
    position: String
}

type Team {
    id: ID!
    name: String!
    city: String
    arena: String
    founded: String
    owner: String
    coach: String
    conference: String
    players: [Player]
}

input TeamInput {
    name: String!
    city: String
    arena: String
    founded: String
    owner: String
    coach: String
    conference: String
}

type TeamStats {
    id: ID!
    teamId: Int
    played: Int
    won: Int
    lost: Int
    ppg: Float
    rpg: Float
    apg: Float
    fgpercent: Float
    ftpercent: Float
    fgthreepercent: Float
    season: String
    confRank: Int
}

input TeamStatsInput {
    teamId: Int
    played: Int
    won: Int
    lost: Int
    ppg: Float
    rpg: Float
    apg: Float
    fgpercent: Float
    ftpercent: Float
    fgthreepercent: Float
    season: String
    confRank: Int
}

type PlayerStats {
    id: ID!
    playerId: Int
    minpergame: Float
    ppg: Float
    rpg: Float
    apg: Float
    stealspergame: Float
    bpg: Float
    tov: Float
    fgpercent: Float
    ftpercent: Float
    fgthreepercent: Float
    season: String
}

input PlayerStatsInput {
    playerId: Int
    minpergame: Float
    ppg: Float
    rpg: Float
    apg: Float
    stealspergame: Float
    bpg: Float
    tov: Float
    fgpercent: Float
    ftpercent: Float
    fgthreepercent: Float
    season: String
}

type AppUser {
    id: ID!
    username: String
    password: String
}

input UserInput {
    username: String
    password: String
}

type Mutation {
    createPlayer(playerInput: PlayerInput!): Int
    createTeam(teamInput: TeamInput!): Int
    updatePlayer(playerId: ID, playerInput: PlayerInput!): Int
    updateTeam(teamId: ID, teamInput: TeamInput!): Int
    deletePlayer(playerId: ID): Player
    deleteTeam(teamId: ID): Team
    updatePlayerStats(playerStatsInput: PlayerStatsInput!): Int
    updateTeamStats(teamStatsInput: TeamStatsInput!): Int
    createUser(userInput: UserInput!): Int
}

type Query {
    teams : [Team]
    players : [Player]
    positions : [String]
    playerByPlayerId(id: ID) : Player
    teamById(id: ID) : Team
    playersByTeamId(teamId: ID) : [Player]
    getPlayerStats(playerId: ID) : [PlayerStats]
    getPlayerStatsBySeason(playerId: ID, season: String): PlayerStats
    getTeamStats(teamId: ID) : [TeamStats]
    getTeamStatsBySeason(teamId: ID, season: String): TeamStats
}

enum Role {
    VIEWER
    ADMIN
}



